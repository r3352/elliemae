// Decompiled with JetBrains decompiler
// Type: EllieMae.EMLite.ContactUI.Import.ImportSourcePanel
// Assembly: ContactUI, Version=24.3.0.5, Culture=neutral, PublicKeyToken=null
// MVID: A4DFDE69-475A-433E-BCA0-5CD47FD00B4A
// Assembly location: C:\SmartClientCache\Apps\UAC\Ellie Mae\xIHR5EqGa7zPnRG0YpD5z4TPAB0=\Encompass360\ContactUI.dll

using EllieMae.EMLite.ClientServer;
using EllieMae.EMLite.ClientServer.Configuration;
using EllieMae.EMLite.Common;
using EllieMae.EMLite.Common.UI.Wizard;
using EllieMae.EMLite.RemotingServices;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace EllieMae.EMLite.ContactUI.Import
{
  public class ImportSourcePanel : ContactImportWizardItem
  {
    private static int _disableOutlookImport;
    private Panel panel2;
    private Label label2;
    private Label label1;
    private RadioButton radOutlook;
    private RadioButton radCSV;
    private RadioButton radPoint;
    private IContainer components;

    public ImportSourcePanel(ContactImportParameters importParams)
      : base(importParams)
    {
      this.InitializeComponent();
      if (ImportSourcePanel._disableOutlookImport == 0)
        ImportSourcePanel._disableOutlookImport = (EnableDisableSetting) Session.ServerManager.GetServerSetting("Import.OutlookImport") != EnableDisableSetting.Disabled ? -1 : 1;
      if (ImportSourcePanel._disableOutlookImport > 0 && (!Session.UserInfo.IsAdministrator() || EnConfigurationSettings.GlobalSettings.RuntimeEnvironment == RuntimeEnvironment.Hosted))
        this.radOutlook.Enabled = false;
      if (importParams.ContactType == ContactType.TPO || importParams.ContactType == ContactType.TPOCompany)
      {
        this.radOutlook.Visible = false;
        this.radCSV.Checked = true;
      }
      if (importParams.ContactType == ContactType.BizPartner)
        return;
      this.radPoint.Visible = false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.panel2 = new Panel();
      this.radPoint = new RadioButton();
      this.label2 = new Label();
      this.label1 = new Label();
      this.radOutlook = new RadioButton();
      this.radCSV = new RadioButton();
      this.panel2.SuspendLayout();
      this.SuspendLayout();
      this.panel2.BackColor = Color.White;
      this.panel2.Controls.Add((Control) this.radPoint);
      this.panel2.Controls.Add((Control) this.label2);
      this.panel2.Controls.Add((Control) this.label1);
      this.panel2.Controls.Add((Control) this.radOutlook);
      this.panel2.Controls.Add((Control) this.radCSV);
      this.panel2.Dock = DockStyle.Fill;
      this.panel2.Location = new Point(0, 60);
      this.panel2.Name = "panel2";
      this.panel2.Size = new Size(496, 254);
      this.panel2.TabIndex = 14;
      this.radPoint.Location = new Point(96, 156);
      this.radPoint.Name = "radPoint";
      this.radPoint.Size = new Size(306, 24);
      this.radPoint.TabIndex = 18;
      this.radPoint.Text = "Import from Calyx Point Cardex";
      this.radPoint.Click += new EventHandler(this.onRadioChecked);
      this.label2.Location = new Point(38, 66);
      this.label2.Name = "label2";
      this.label2.Size = new Size(418, 21);
      this.label2.TabIndex = 17;
      this.label2.Text = "Select the source from which you wish to import:";
      this.label1.Location = new Point(38, 26);
      this.label1.Name = "label1";
      this.label1.Size = new Size(418, 36);
      this.label1.TabIndex = 16;
      this.label1.Text = "Encompass can import contacts directly from Microsoft Outlook or from a Comma-Separated Values (CSV) file generated by another application.";
      this.radOutlook.Location = new Point(96, 96);
      this.radOutlook.Name = "radOutlook";
      this.radOutlook.Size = new Size(306, 24);
      this.radOutlook.TabIndex = 15;
      this.radOutlook.Text = "Import from Microsoft Outlook";
      this.radOutlook.Click += new EventHandler(this.onRadioChecked);
      this.radCSV.Location = new Point(96, 126);
      this.radCSV.Name = "radCSV";
      this.radCSV.Size = new Size(306, 24);
      this.radCSV.TabIndex = 14;
      this.radCSV.Text = "Import from a Comma-Separated Values (CSV) file";
      this.radCSV.Click += new EventHandler(this.onRadioChecked);
      this.Controls.Add((Control) this.panel2);
      this.Header = "Data Source";
      this.Name = nameof (ImportSourcePanel);
      this.Subheader = "Select the data source from which to import";
      this.Controls.SetChildIndex((Control) this.panel2, 0);
      this.panel2.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    public override bool NextEnabled
    {
      get => this.radCSV.Checked || this.radOutlook.Checked || this.radPoint.Checked;
    }

    public override WizardItem Next()
    {
      if (this.radCSV.Checked)
      {
        if (this.ImportParameters.ImportMethod != ImportMethod.CSV)
        {
          this.ImportParameters.ImportMethod = ImportMethod.CSV;
          this.ImportParameters.ImportOptions = (object) new CsvImportParameters(this.ImportParameters.ContactType);
        }
      }
      else if (this.radPoint.Checked)
      {
        if (this.ImportParameters.ImportMethod != ImportMethod.Point)
        {
          this.ImportParameters.ImportMethod = ImportMethod.Point;
          this.ImportParameters.ImportOptions = (object) new PointImportOptions();
        }
      }
      else
        this.ImportParameters.ImportMethod = ImportMethod.Outlook;
      if (this.ImportParameters.ContactType != ContactType.TPO && this.ImportParameters.ContactType != ContactType.TPOCompany)
      {
        if (this.ImportParameters.ContactType == ContactType.BizPartner)
        {
          ContactAccess contactAccess = ContactAccess.Private;
          FeaturesAclManager aclManager = (FeaturesAclManager) Session.ACL.GetAclManager(AclCategory.Features);
          if (Session.UserInfo.IsSuperAdministrator())
          {
            contactAccess = ContactAccess.Public;
          }
          else
          {
            BizGroupRef[] contactGroupRefs = Session.AclGroupManager.GetBizContactGroupRefs(Session.UserID, true);
            if (contactGroupRefs != null && contactGroupRefs.Length != 0)
              contactAccess = ContactAccess.Public;
          }
          if (contactAccess != ContactAccess.Private)
            return (WizardItem) new ContactAccessPanel((ContactImportWizardItem) this);
          this.ImportParameters.AccessLevel = ContactAccess.Private;
        }
        else
        {
          ContactAccess contactAccess = ContactAccess.Private;
          AclGroup[] groupsOfUser = Session.AclGroupManager.GetGroupsOfUser(Session.UserID);
          if (groupsOfUser != null && groupsOfUser.Length != 0)
          {
            foreach (AclGroup aclGroup in groupsOfUser)
            {
              if (aclGroup.ViewSubordinatesContacts)
              {
                contactAccess = ContactAccess.Public;
                break;
              }
            }
          }
          if (contactAccess != ContactAccess.Public)
            return (WizardItem) new ContactAccessPanel((ContactImportWizardItem) this);
          this.ImportParameters.AccessLevel = ContactAccess.Public;
        }
      }
      if (this.radCSV.Checked)
        return (WizardItem) new CsvFileSelectionPanel((ContactImportWizardItem) this);
      return this.radPoint.Checked ? (WizardItem) new PointFolderSelectionPanel((ContactImportWizardItem) this) : (WizardItem) new OutlookImportPanel((ContactImportWizardItem) this);
    }

    private void onRadioChecked(object sender, EventArgs e) => this.OnControlsChange();
  }
}
