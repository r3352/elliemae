// Decompiled with JetBrains decompiler
// Type: EllieMae.EMLite.ClientServer.Configuration.SettingDefinitions
// Assembly: ClientServer, Version=1.5.1.0, Culture=neutral, PublicKeyToken=d11ef57bba4acf91
// MVID: 301E11EA-0960-40C7-AC1B-26929E024B20
// Assembly location: C:\SmartClientCache\Apps\UAC\Ellie Mae\xIHR5EqGa7zPnRG0YpD5z4TPAB0=\Encompass360\ClientServer.dll

using Elli.ElliEnum;
using EllieMae.EMLite.Common;
using EllieMae.EMLite.Common.Licensing;
using System;
using System.Collections;
using System.ComponentModel;
using System.Reflection;

#nullable disable
namespace EllieMae.EMLite.ClientServer.Configuration
{
  public class SettingDefinitions
  {
    private static string[] categories = (string[]) null;
    private static Hashtable settingDefs = new Hashtable(20, (IEqualityComparer) StringComparer.OrdinalIgnoreCase);
    private static ArrayList settingList = new ArrayList();
    private static bool settingsForTestingAdded = false;

    private SettingDefinitions()
    {
    }

    static SettingDefinitions()
    {
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eFolder.ViewInOriginalFormat", "View Original Format", "View original file in original format, or modified attachment as PDF", SettingTargetSystem.All, typeof (eFolderViewInOriginalFormat), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (eFolderViewInOriginalFormat)), (object) eFolderViewInOriginalFormat.ViewOriginalAttachmentInOriginalFormat, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("eFolder.SingleContainerIndividualPDFs", "Merge PDFs to single document container", "", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("eFolder.MaxZipSize", "Max size of ZIP files for Image Attachments", "", SettingTargetSystem.All, 1000000, 5000000, 5000000, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("eFolder.DownloadBufferSize", "Size of the buffer used for downloading files", "", SettingTargetSystem.All, 4096, 262144, 81920, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("eFolder.UploadBufferSize", "Size of the buffer used for uploading files", "", SettingTargetSystem.All, 4096, 262144, 81920, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("eFolder.EnableNG", "NG eFolder enablement workflow", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("NotificationTemplates.SenderEmail", "Sender Email address of notification templates", "Enables storage of sender email address of notification templates", SettingTargetSystem.All, 320, "", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Password.SSOLogin", "SSO Login Flow", "Enable or Disable the SSO Login Flow (0 = Disabled)", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.MinLength", "Min Password Length", "The minimum length of a user's password.", SettingTargetSystem.All, 0, 50, 6, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.NumUpperCase", "Min # of Upper Case Letters", "The minimum number of upper case letters required in the password", SettingTargetSystem.All, 0, 50, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.NumLowerCase", "Min # of Lower Case Letters", "The minimum number of lower case letters required in the password", SettingTargetSystem.All, 0, 50, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.NumDigits", "Min # of Digits", "The minimum number of digits required in the password", SettingTargetSystem.All, 0, 50, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.NumSpecial", "Min # of Special Characters", "The minimum number of special characters required in the password", SettingTargetSystem.All, 0, 50, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.Lifetime", "# of Days to Expiration", "The number of days that a password will be valid prior to expiring. (0 = Disabled)", SettingTargetSystem.All, 0, 9999, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.HistorySize", "# of Passwords Before Reuse", "The number of previous passwords retained per user to prevent password reuse.", SettingTargetSystem.All, 0, 20, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.DaysToReuse", "# of Days Before Reuse", "The number of days that must elapse before a user may reuse a password.", SettingTargetSystem.All, 0, int.MaxValue, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Password.MaxLoginFailures", "Password Failure Limit", "The number of incorrect login attempts that can be made prior to the user's account being locked (0 = Disabled).", SettingTargetSystem.All, 0, int.MaxValue, 0, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Password.PasswordFailureLockout", "Enable Timeout Reset", "Enables or disables timeout setting for the time the user's account is locked.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Password.PasswordFailureLockoutPeriod", "Password Failure Lockout Time In Minutes", "The number of minutes that must elapse before a user may need to wait until the next attempt.", SettingTargetSystem.All, typeof (PasswordFailureLockoutPeriod), (object) PasswordFailureLockoutPeriod.Fifteen, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Password.PasswordFailureLockoutForAdmin", "Apply Lockout For 'admin' User", "Apply password lockout policy to 'admin' user", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Login.Enabled", "Logins Enabled", "Enables or disables logins to the Encompass Server.", SettingTargetSystem.Server, true, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Cache.Setting", "Caching Level", "The degree to which the Encompass Server caches local data to improve performance.", SettingTargetSystem.SelfHostedServer, typeof (CacheSetting), (object) CacheSetting.Low, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Mutex.Setting", "Server Mutex Setting", "The means by which the server handles concurrency locking between processes.", SettingTargetSystem.SelfHostedServer, typeof (ServerMutexSetting), (object) ServerMutexSetting.Default, false, false));
      SettingDefinitions.add((SettingDefinition) new BitmaskSettingDefinition("Printing.GFE", "Default GFE Forms for Printing", "The GFE forms that will be selected when Print is selected from the GFE.", SettingTargetSystem.All, typeof (GFEPrintingDefault), (IEnumNameProvider) new BitmaskEnumNameProvider(typeof (GFEPrintingDefault), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (GFEPrintingDefault))), (object) (GFEPrintingDefault.Itemization | GFEPrintingDefault.BrokerEx), false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Printing.ServerForm", "Standard Forms Location", "Choose to use forms located on the client or server for Print.", SettingTargetSystem.Server, typeof (OutputFormLocation), (object) OutputFormLocation.Client, true, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Printing.PrintLOLicense", "Print State License # on 1003", "Enable or disable State License Number Print on 1003.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Printing.UseDefaultPrintSelection", "Autoselect current form when printing", "Enable or disable autoselect current form when printing.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Printing.WordBackgroundPrint", "Word Background Printing", "Enable or disable Word Background Printing.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Printing.URLAPageNumbering", "URLA Page Numbering", "URLA Page Numbering None,All, Group by Form", SettingTargetSystem.All, typeof (URLAPageNumbering), (object) URLAPageNumbering.AllPages, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.ApplyFixedAPRToleranceToARMs", "Apply 0.125% APR Tolerance to ARMs", "ARM loans will use a 0.125% APR Tolerance for the TIL Redisclosure alert instead of 0.25%", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.SuppressNegativeAPRAlert", "Suppress Negative APR Tolerance Alerts", "Supress the APR Tolerance alert when the APR has decreased compared to the disclosed value.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.ApplyFixedAPRToleranceToARMs2015", "Apply 0.125% APR Tolerance to ARMs", "ARM loans will use a 0.125% APR Tolerance for the TIL Redisclosure alert instead of 0.25%", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.SuppressNegativeAPRAlert2015", "Suppress Negative APR Tolerance Alerts", "Supress the APR Tolerance alert when the APR has decreased compared to the disclosed value.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForClosingDate", "Include Day 0 for Closing Date", "When calculating the earliest closing date for a loan, include Day 0 in that count.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForDisclosureDate", "Include Day 0 for Initial Disclosure Date", "When calculating the initial disclosure due date for a loan, include Day 0 in that count.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForGFEExpirationDate", "Include Day 0 for GFE Expiration Date", "When calculating the GFE expiration date for a loan, include Day 0 in that count.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForRediscloseDueDate", "Include Day 0 for Redisclose Due Date", "When calculating the Redislcose due date for a loan, include Change Circumstances Day 0 in that count.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForRESPAAdjustDate", "Adjust earliest Closing Date", "Adjust earliest Closing Date based upon actual received date.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForRESPASunHoliday", "Opt in for Sunday closings", "Earliest Closing Date Sunday checkbox, when True,, would effectively override the calendar settings for the count of days.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Compliance.CountDay0ForRESPAFedHoliday", "Opt in for Federal Holiday closings", "Earliest Closing Date Holiday checkbox, when True,, would effectively override the calendar settings for the count of days.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Alert.DONOTSHOWDECLINECONSENT", "", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Alert.USEAPPLICATIONDATE", "", "", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.AutoRecover", "Autosave", "Enable or disable saving Autosave data during loan editing.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Components.AutosaveInterval", "Autosave Interval (sec)", "Default autosave interval in seconds.", SettingTargetSystem.All, 1, 3600, 120, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.AutosaveUserConfig", "Autosave User Config", "Enable or disable user/client autosave configuration settings.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.Scanning", "Document Scanning", "Enable or disable document scanning", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.IM", "Instant Messenger", "Enable or disable Instant Messenger.", SettingTargetSystem.Server, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.CS", "Calendar Sharing", "Enable or disable Calendar Sharing.", SettingTargetSystem.Server, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.PrintToFile", "PDF Print to File", "Enable or disable the \"Print to File\" function for PDF output.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.GC", "Periodic Garbage Collection", "Enable or disable garbage collection periodically.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Components.RateLockRefreshInterval", "Min Pipeline Auto-refresh Interval (sec)", "Minimum allowed pipeline auto-refresh interval in seconds.", SettingTargetSystem.Banker, 30, 3600, 30, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.DisplayBusinessRuleOption", "Templates Ignore Fee Mgmt Persona/Biz Rules", "Provide an option to ignore business rules and Fee Management Persona when applying template data in a loan.", SettingTargetSystem.Banker, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.DuplicateLoanCheck", "Duplicate Loan Check", "Enable or Disable duplicate loan check.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.OutlookImport", "Import - Outlook", "Enable or disable Outlook import", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.LoanNumbering", "Create New Loan # On Import", "Enable or disable Loan Numbering when import", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.AutoLOAssignment", "Automatic Assignment of Loan Officer", "Enables or disables automatic assignment of Loan Officer during import.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.LOAllowedImport", "Loan Officer is Allowed to import", "Loan Officer is Allowed to import.", SettingTargetSystem.All, typeof (NonLicenseLOAllowedImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (NonLicenseLOAllowedImportSetting)), (object) NonLicenseLOAllowedImportSetting.AllowImport, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.FannieMaeCalcLock", "FNMA Loan Import", "Lock or unlock calculation fields when importing Fannie Mae file", SettingTargetSystem.All, typeof (CalculationFieldLockedImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (CalculationFieldLockedImportSetting)), (object) CalculationFieldLockedImportSetting.KeepCalculatedValues, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.LOSCalcLock", "LOS Loan Import", "Lock or unlock calculation fields when importing loan from other LOS softwares", SettingTargetSystem.All, typeof (CalculationFieldLockedImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (CalculationFieldLockedImportSetting)), (object) CalculationFieldLockedImportSetting.KeepCalculatedValues, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.EnforceApplicationDate", "WebCenter/DU 3.2/MISMO 3.4 Application Import Date", "WebCenter/DU 3.2/MISMO 3.4 Application Import Date", SettingTargetSystem.All, typeof (ApplicationDateImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ApplicationDateImportSetting)), (object) ApplicationDateImportSetting.DoNotChange, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.TPOLoanImport", "TPO Portal Loan Import", "Lock or unlock calculation fields when importing TPO Portal loan file", SettingTargetSystem.All, typeof (CalculationFieldLockedImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (CalculationFieldLockedImportSetting)), (object) CalculationFieldLockedImportSetting.KeepCalculatedValues, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Import.TPODateImport", "TPO Portal Application Date Import", "TPO Portal Application Date Import", SettingTargetSystem.All, typeof (ApplicationDateImportSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ApplicationDateImportSetting)), (object) ApplicationDateImportSetting.DoNotChange, false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Internal.ECPWD", "ECPWD", "ECPWD", SettingTargetSystem.All, 1024, (string) null, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Unpublished.MaxEntriesInAFolder", "Max # of Entries in a Folder", "Maximum number of entries (loans) allowed in a loan folder.", SettingTargetSystem.All, 0, 50000, 0, true, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Unpublished.FormsConfigLocation", "Location of Forms Configuration Files", "Allows forms configuration files (e.g. Input and Output form lists) to be pulled from the client or server.", SettingTargetSystem.All, typeof (OutputFormLocation), (object) OutputFormLocation.Client, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Unpublished.MaxUserIdleTime", "Maximum User Idle Time", "Maximum user idle time (in seconds) before workstation is locked or Encompass is forced to be terminated.", SettingTargetSystem.All, 0, 1000000000, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Unpublished.MaxUserIdleTime2", "Maximum User Idle Time 2", "Maximum user idle time (in seconds) before Encompass is forced to be terminated.", SettingTargetSystem.All, 0, 1000000000, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Unpublished.ActionAfterUserIdle", "Action After User Idle", "Action to be taken after user idle for \"MaxUserIdleTime\" seconds.", SettingTargetSystem.All, typeof (ActionAfterUserIdle), (object) ActionAfterUserIdle.ExitEncompass, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Unpublished.InputFormAutoFocus", "Input Form Auto Focus", "Auto set focus to the first tab index field on an input form after loading the form.", SettingTargetSystem.All, false, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Unpublished.IncludeCrashedSessionLoanLocks", "Include Crashed Session Loan Locks", "When considering loan locks, also include locks with no valid associated login session IDs.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Unpublished.ExclusiveLockCurrLoginsOnly", "Exclusive Lock to Consider Current Logins Only", "When checking exclusive lock, only consider currently logged-in users.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowConcurrentEditing", "Enable Multi-User Editing", "Allow multiple users editing loan files.", SettingTargetSystem.OfflineBanker, false, true, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowSdkCE", "Enable SDK Multi-User Editing", "Allow multiple users editing loan files for SDK.", SettingTargetSystem.OfflineBanker, false, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.HideChangesMadeByOthers", "Hide Changes Made by Others", "Hide the list of changes made by other users.", SettingTargetSystem.OfflineBanker, false, true, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("ConcurrentEditing.MergeResultsOption", "Concurrent Edting Merge Results Option", "Concurrent editing merge results merge results display option.", SettingTargetSystem.All, typeof (CEMergeResultsOption), (object) CEMergeResultsOption.ConflictsAndChangesByOthers, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("FormBuilder.Publishing", "Form Publishing", "Permits users to publish forms to the Encompass Server.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ShowPrintingLog", "Show Printing Records in Log", "Show printing records in the milestone log.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ConversationLogLock", "Lock Conversation Log", "When the Conversation Log is locked, only the Encompass 'superuser' can edit previouly entered information.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.GeneralLogLock", "Lock General Log", "When the General Log is locked, only the Encompass 'superuser' can edit previouly entered information.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockLoanNumber", "Lock Loan Number", "Lock loan number for read-only.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.LoanNumber", "When to Start Loan Numbering", "Select when to start loan numbering.", SettingTargetSystem.All, 256, "1", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.DocumentTrackingDayCount", "Document Tracking Day Count Setting", "Select day count type", SettingTargetSystem.All, typeof (AutoDayCountSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (AutoDayCountSetting)), (object) AutoDayCountSetting.CalendarDays, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.MilestoneExpDayCount", "Milestone Expected Day Count Setting", "Select day count type", SettingTargetSystem.All, typeof (AutoDayCountSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (AutoDayCountSetting)), (object) AutoDayCountSetting.CompanyDays, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.MilestoneTemplateSettings", "Milestone Template Settings", "Select preferred setting", SettingTargetSystem.All, typeof (MilestoneTemplatesSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (MilestoneTemplatesSetting)), (object) MilestoneTemplatesSetting.Automatic, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ShowNonMatchingMilestoneTemplate", "Show Non-matching Milestone Template", "Hide Non-matching Milestone Template.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.MilestoneTemplateChangeNotification", "Milestone template change notification", "Email Milestone change notification.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.LockExpDayCount", "Rate Lock Expiration Day Count Setting", "Select day count type", SettingTargetSystem.All, typeof (LockExpDayCountSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (LockExpDayCountSetting)), (object) LockExpDayCountSetting.OnTheDay, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.LockExpCalendar", "Rate Lock Expiration Calendar Setting", "Select calendar type", SettingTargetSystem.All, typeof (LockExpCalendarSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (LockExpCalendarSetting)), (object) LockExpCalendarSetting.None, true, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.LockExpExclude", "Rate Lock Expiration Excluded Day Setting", "Select excluded day type", SettingTargetSystem.All, typeof (LockExpDayExcludeSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (LockExpDayExcludeSetting)), (object) LockExpDayExcludeSetting.NextBusinessDay, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AppendNewLoanTemplate", "Append value in New Loan Template", "Append value in New Loan Template", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AppendLoanProgram", "Append value in Loan Program", "Append value in Loan Program", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AppendClosingCost", "Append value in Closing Cost", "Append value in Closing Cost", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ContactUpdateMilestone", "Contact Update Milestone", "Contact Update Milestone", SettingTargetSystem.All, 50, "", false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.SettingsAuditTrailPurge", "Number of days to keep settings audit record before purging", "", SettingTargetSystem.All, 1, 999, 30, false, false));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.SettingsAuditTrailLastPurged", "DTTM settings audit trail last purged", "Date and Time settings audit trail last purged", SettingTargetSystem.All, DateTime.MinValue, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.Pricing_CustomizeName", "Customize investor name import", "Customize investor name import", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.Pricing_CustomizeInvestorName", "Always save the invesetor name to the Encompass investor name field", "Always save the invesetor name to the Encompass investor name field", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.Pricing_CustomizeLenderName", "Always save the investor name to the Encompass lender name field", "Always save the investor name to the Encompass lender name field", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.Pricing_CustomizeNameDepends", "Save the investor name to the Encompass lender name field only for wholesale programs", "Save the investor name to the Encompass lender name field only for wholesale programs", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.VoidedFlagEnabled", "Check if the Voided Flag is Enabled or Disabled while removing loan from Trade", "Check if the Voided Flag is Enabled or Disabled while removing loan from Trade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.Pricing_ElapsedTime", "Allowed Elapsed Time", "Allowed Elapsed Time", SettingTargetSystem.All, 0, 100000, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.URLA2020", "Default to URLA 2020", "Set Date to Use URLA 2020", SettingTargetSystem.All, Utils.ParseDate((object) "11/01/2020"), false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockVoid", "Enable Lock Void", "Enable Lock Void", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockVoidRetail", "Enable Lock Void Retail", "Enable Lock Void Retail", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockVoidWholesale", "Enable Lock Void Wholesale", "Enable Lock Void Wholesale", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new DoubleSettingDefinition("Policies.HELOCTableLoanAmount", "HELOC Important Terms Historical Table Loan Amount", "Set HELOC Terms Historical Table Loan Amount", SettingTargetSystem.All, 2, 10000.0, false, true));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.NewRESPA2015", "Default to RESPA-TILA 2015 LE and CD", "Set Date to Use TILA-RESPA 2015 LE and CD", SettingTargetSystem.All, Utils.ParseDate((object) "10/03/2015"), false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Feature.ENABLEURLA2020", "Enable URLA 2020", "Used to enable or disable URLA 2020 Feature", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableZeroParPricingRetail", "Enable Zero Based Par Pricing for Retail", "Enable Zero Based Par Pricing for Retail", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableZeroParPricingWholesale", "Enable Zero Based Par Pricing for Wholesale", "Enable Zero Based Par Pricing for Wholesale", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.DefaulttoUseCDRebaselineDate", "Use CD to Rebaseline Date", "Use CD to Rebaseline Date", SettingTargetSystem.All, Utils.ParseDate((object) "06/01/2018"), false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnforceOnlyWhenNoCurrentLock", "Enforce only when no current lock.", "Enforce only when no current lock.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.Use10DigitDecimalPricing", "Use 10 digit decimal fields for several fields in lock request/secondar/trade areas.", "Use 10 digit decimal fields for several fields in lock request/secondar/trade areas.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockExtension", "Enable Lock Extension", "Enable Lock Extension", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowNewLockOutsideLDHours", "Allow New Lock outside Lock Desk hours", "Allow New Lock outside Lock Desk hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.NotAllowPricingChange", "Do not allow changes after pricing has been retrieved", "Do not allow changes after pricing has been retrieved ", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LockExtension_Cap_Type", "Lock Extension Cap Type", "", SettingTargetSystem.All, 0, 2, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LockExtension_Cap_Days", "Lock Extension Cap Days", "", SettingTargetSystem.All, 1, 999, 30, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.LockExpDays", "Days of Lock Expiration or Cancellation Date", "Days of Lock Expiration or Cancellation Date", SettingTargetSystem.All, 512, "60", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.GetCurrentPricing", "Get Current Pricing", "Get Current Pricing", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LockExtensionCompanyControlled", "Company controls extension days and price adjustment", "Company controls extension days and price adjustment", SettingTargetSystem.All, 0, 2, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtensionAllowDailyAdj", "Lock Extension Allow Daily Adjustment", "Lock Extension Allow Daily Adjustment", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtensionAllowFixedExt", "Lock Extension Allow Fixed Extension Days and Adjustment", "Lock Extension Allow Fixed Extension Days and Adjustment", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new DecimalSettingDefinition("Policies.LockExtensionDailyPriceAdj", "Lock Extension: Daily Price Adjustment", "Lock Extension: Daily Price Adjustment", SettingTargetSystem.All, 3, 0M, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtensionCalendarOpt", "Apply Lock Expiration Calendar to Lock Extensions", "Apply Lock Expiration Calendar to Lock Extensions", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtCalOpt_ApplyPriceAdj", "Apply lock extension price adjustments to weekends and holidays", "Apply lock extension price adjustments to weekends and holidays", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockCancellation", "Enable Lock Cancellation", "Enable Lock Cancellation", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockCancellation_ReqForm", "Enable Lock Cancellation on Lock Request Form", "Enable Lock Cancellation on Lock Request Form", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RelockOnly", "Enable Re-Lock only when a current lock exists.", "Enable Re-Lock only when a current lock exists.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableRelock", "Enable Re-Lock.", "Enable Re-Lock.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableRelockOutsideLockDeskHours", "Enable relocks outside lock desk hours.", "Enable relocks outside lock desk hours.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableRelockForTpoClient", "Enable relocks for TPO clients.", "Enable relocks for TPO clients.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RelockAllowTotalCap", "Relock Allow Total Cap.", "Relock Allow Total Cap.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.RelockAllowTotalCapTimes", "Relock Allow Total Cap Days.", "Relock Allow Total Cap Days.", SettingTargetSystem.All, 0, 10, 2, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RelockFeeAllowed", "Enable Re-lock fee for each re-lock.", "Enable Re-lock fee for each re-lock.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new DecimalSettingDefinition("Policies.RelockFee", "Re-lock fee for each re-lock.", "Re-lock fee for each re-lock.", SettingTargetSystem.All, 3, 0M, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RateLockExpirationTime", "Apply Rate Lock Expiration Time", "Apply Rate Lock Expiration Time", SettingTargetSystem.All, 512, "5:00 PM", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RateLockExpirationTimeZone", "Apply Rate Lock Expiration Timezone", "Apply Rate Lock Expiration Timezone", SettingTargetSystem.All, 512, "(UTC -05:00) Eastern Time", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.eSignReceivedDate", "Use document viewed date as received date for eSigned Documents.", "Use document viewed date as received date for eSigned Documents.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtensionAllowTotalCap", "Lock Extension Allow Total Cap", "Lock Extension Allow Total Cap", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LockExtensionAllowTotalCapDays", "Lock Extension Allow Total Cap Days", "Lock Extension Allow Total Cap Days", SettingTargetSystem.All, 0, 100000, 90, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockExtAllowTotalTimesCapEnabled", "Enable Lock Extension Allow Total Times", "Enable Lock Extension Allow Total Times", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LockExtAllowTotalTimesCap", "Lock Extension Allow Total Times", "Lock Extension Allow Total Times", SettingTargetSystem.All, 0, 999, 3, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CDExpirationTime", "Apply CD Expiration Time", "Apply CD Expiration Time", SettingTargetSystem.All, 512, "5:00 PM", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CDExpirationTimeZone", "Apply Closing Disclosure Expiration Timezone", "Apply Closing Disclosure Expiration Timezone", SettingTargetSystem.All, 512, "(UTC -05:00) Eastern Time", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ItemizeEscrow", "Itemize Escrow Disbursements", "Enables or disables Itemize Escrow Disbursements.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ENABLETRIGGERTORUNESCROWDATECALC", "Prevent Aggregate Escrow from moving disbursements", "Prevent Aggregate Escrow from moving disbursements", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.LoanAmountRounding", "Loan Amount Rounding", "Enables or disables loan amount rounding.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.InterviewerPopulation", "Interviewer Info Populated From", "Populate interviewer information from File Starter or Loan Officer.", SettingTargetSystem.All, typeof (InterviewerInfoSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (InterviewerInfoSetting)), (object) InterviewerInfoSetting.FileStarter, false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CountyLimitURL", "URL for county limit", "", SettingTargetSystem.All, 256, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnforceCountyLimit", "Do not allow amount to be higher than county limit", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.MilestoneRollback", "Allow Non-sequential Milestone Rollback", "Enables or disables Non-sequential Milestone Rollback", SettingTargetSystem.Banker, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.SyncItemization", "After Disclosure Copy fees to GFE", "After Disclosure Copy fees to GFE", SettingTargetSystem.All, typeof (SyncItemizationSetting), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (SyncItemizationSetting)), (object) SyncItemizationSetting.AlwaysUpdate, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.DisclosePrint", "Trigger disclosure tracking when print", "", SettingTargetSystem.All, typeof (DisclosureRecordSetting), (object) DisclosureRecordSetting.PromptUser, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DiscloseeFolder", "Trigger disclosure tracking when eDisclose", "", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AutoRecoverDTLogs", "AutoRecovery of disclosure tracking logs", "", SettingTargetSystem.All, true, true, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.DisclosePrintPreview", "Trigger disclosure tracking when preview", "", SettingTargetSystem.All, typeof (DisclosureRecordSetting), (object) DisclosureRecordSetting.PromptUser, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DiscloseManually", "Create disclosure tracking manually", "", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.SaveDisclosuresPrintMenu", "Save copy of disclosures when disclosing from Print Menu", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.SaveDisclosureseFolder", "Save copy of disclosures when disclosing from eFolder", "", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.GFEDaysToExpire", "GFE days to expire", "GFE days to expire", SettingTargetSystem.All, 10, int.MaxValue, 10, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RequireCoCPriorDisclosure", "Require fee level Changed Circumstances prior to disclosure", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LEDaysToExpire", "LE days to expire", "LE days to expire", SettingTargetSystem.All, 10, int.MaxValue, 10, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.IPRestriction", "Allow access from certain IPs", "Allow users to access Encompass server from only certain IP addresses.", SettingTargetSystem.Server, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CreditorOverride", "Allow creditor override on Statement of Denial", "Always use the Correspondent Buyer as the Creditor on the Statement of Denial form when Channel is “Correspondent” and Underwriting is not Delegated.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableSendDisclosure", "Enable Send Disclosure", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.FeeListOption", "Apply Fee Management to 2010 Itemization", "Apply Fee Management to 2010 Itemization", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.AllowEConsentWithdrawal", "Allow withdrawal of eConsent", "Allow users to withdraw eConsent from Encompass.", SettingTargetSystem.Server, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EmailUnsubscribeLink", "Include Unsubscribe Link in Emails", "Include Unsubscribe Link in Emails", SettingTargetSystem.Server, false, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.OpeningDocRetentionCount", "Opening Doc Sets Retained/Loan", "Number of Opening Docs sets retained per loan", SettingTargetSystem.Server, 1, 100, 3, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.ClosingDocRetentionCount", "Closing Doc Sets Retained/Loan", "Number of Closing Docs sets retained per loan", SettingTargetSystem.Server, 1, 100, 3, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DelayAttachmentConversion", "Delays Attachment Conversion to get good performance", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.TPOOriginator", "TPO Originator", "TPO Originator", SettingTargetSystem.All, typeof (TPOOriginator), (object) TPOOriginator.Keep_TPO_Originator, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowMobile", "Allow Mobile Platform", "Allow Mobile Platform", SettingTargetSystem.All, true, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowAnalysisTool", "Allow Analysis Tool", "Allow Analysis Tool", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowWebPipeline", "Allow Web Pipeline", "Allow Web Pipeline", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowWebTrading", "Allow Web Trading", "Allow Web Trading", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EncompassWebPipelineViewByAdmin", "Default EncompassWeb Pipeline for Admin", "Default EncompassWeb Pipeline for Admin", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EncompassWebTradingViewByAdmin", "Default EncompassWeb Trading for Admin", "Default EncompassWeb Trading for Admin", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CheckDisclosureTracking", "Check Disclosure Tracking", "Check Disclosure Tracking", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RestrictLOConnectAccessViewOnly", "Restrict LO Connect access to View only", "Restrict LO Connect access to View only", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("EDS.EnableEDSFormsConsolidation", "EDS Custom Form Processing", "EDS Custom Form Processing", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.ATRQMPOLICYEXPIRATIONDATE", "QM GSE Patch Expiration Date", "QM GSE Patch Expiration Date", SettingTargetSystem.All, Utils.ParseDate((object) "04/21/2021"), false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EPPS_EPC2_SHIP_DARK_SR", "Enable Ship Dark", "Enable Ship Dark", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.EPPSPartnerID", "ICE PPE Partner ID", "ICE PPE Partner ID", SettingTargetSystem.All, 50, "", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Mail.DeliveryMethod", "Corporate Email Delivery Method", "Determines the default method for email for all users within the company", SettingTargetSystem.All, typeof (EmailDeliveryMethod), (object) EmailDeliveryMethod.Outlook, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Mail.SMTPServer", "Corporate SMTP Server", "The default corporate SMTP server", SettingTargetSystem.All, 50, "", false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Mail.SMTPPort", "Corporate SMTP Server Port", "The port for SMTP mail delivery", SettingTargetSystem.All, 1, (int) short.MaxValue, 25, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Mail.SMTPUserName", "Corporate SMTP Server Login", "The user name for SMTP mail delivery", SettingTargetSystem.All, 50, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Mail.SMTPPassword", "Corporate SMTP Server Password", "The password for SMTP mail delivery", SettingTargetSystem.All, 50, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Mail.SMTPIndividualLogin", "Use Individualized SMTP Logins", "Specifies that each individual user must provide their own login credentials for the SMTP server.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Mail.Configurable", "Allow Mail Delivery Configuration", "Allows Encompass administrators to modify the company's mail settings through the Encompass User Interface.", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Mail.SMTPAllowOverride", "Allow Override of SMTP Settings", "Allow individual override of the corporate SMTP settings.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxRecentViews", "Maximum number of recently used views", "Maximum number of recently used views displayed for a user.", SettingTargetSystem.All, 4, 50, 20, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxBarChartBars", "Maximum number of bar chart bars", "Maximum number of bars to display in a bar chart.", SettingTargetSystem.All, 5, 100, 50, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxTrendChartLines", "Maximum number of trend chart lines", "Maximum number of lines to display in a trend chart.", SettingTargetSystem.All, 5, 50, 10, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxLoanTableRows", "Maximum number of loan table rows", "Maximum number of rows to display in a loan table.", SettingTargetSystem.All, 100, 100000, 1000, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxLoanTableColumns", "Maximum number of loan table columns", "Maximum number of columns to display in a loan table.", SettingTargetSystem.All, 10, 100, 20, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Dashboard.MaxUserTableGroups", "Maximum number of user table groups", "Maximum number of groups to display in a user table.", SettingTargetSystem.All, 5, 100, 10, true, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Dashboard.ReservedViewName1", "Reserved view name", "Defines a view name which is reserved for global use.", SettingTargetSystem.All, 50, "Company View", true, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Dashboard.DefaultDrilldownView", "Default Drilldown Loan Table Snapshot", "Default Drilldown Loan Table Snapshot.", SettingTargetSystem.All, 1024, "", false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Scheduler.NumDaysOfHistory", "# Days of History", "Maximum number of days of history to keep for the task scheduler.", SettingTargetSystem.All, 0, 90, 30, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("License.BillingModel", "Billing Model", "Sets the billing model used by the company.", SettingTargetSystem.All, typeof (BillingModel), (object) BillingModel.Default, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("License.ClosedLoanMilestone", "Milestone that triggers Closed Loan billing", "The ID of the Milestone that is used for Closed Loan billing.", SettingTargetSystem.All, 38, "6", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ApplyDefinedAccessRoles", "Apply these settings to the role even when the role is not assigned to the loan file", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENHANCEDCONDNAPPLYACCESSROLE", "Apply these settings to the role even when the role is not assigned to the loan file", "", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("SHU.Setting", "Automatically download/install server hot updates", "Automatically download/install server hot updates", SettingTargetSystem.All, typeof (ShuSetting), (object) ShuSetting.AutoDownload, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("SHU.SettingDay", "Day to automatically download/install server hot updates", "Day to automatically download/install server hot updates", SettingTargetSystem.All, typeof (ShuSettingDay), (object) ShuSettingDay.EverySunday, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("SHU.SettingTime", "Time to automatically download/install server hot updates", "Time to automatically download/install server hot updates", SettingTargetSystem.All, typeof (ShuSettingTime), (object) ShuSettingTime.AM3, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("SHU.SettingNotificationTime", "Time to notify users before server hot updates", "Time to notify users before server hot updates", SettingTargetSystem.All, 0, 36000, 15, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("SMU.SettingNotificationTime", "Time to notify users before server updates", "Time to notify users before server updates", SettingTargetSystem.All, 0, 36000, 15, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("SMU.SettingNotificationMessage", "Message to notify users before server updates", "Message to notify users before server updates", SettingTargetSystem.All, 250, "Server updates will begin in 15 minutes.You will be forced to log out. Please keep your work before the updates start!", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("DataStore.StorageMode", "Data Storage Mode", "Determines how data is stored in the database", SettingTargetSystem.All, typeof (StorageMode), (object) StorageMode.Default, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("DataStore.VerboseErrors", "Verbose Errors", "Determines if errors that don't affect system-of-record are propagated to user", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("DataStore.CaptureErrors", "Capture Errors", "Determines is loans that cause SQL errors are captured to Log folder", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Components.RebuildPipeline", "Rebuild Pipeline", "Determines if the Rebuild Pipeline function is available for hosted customers", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableMbsPool", "Enable or Disable MBS Pool", "Enable or Disable MBS Pool", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableTrade", "Enable or Disable Security Trade, Loan Search, Loan Trade and Master Commitment", "Enable or Disable Security Trade, Loan Search, Loan Trade and Master Commitment", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableCorrespondentTrade", "Enable or Disable Correspondent Trade", "Enable or Disable Correspondent Trade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableBidTapeManagement", "Enable or Disable Bid Tape Management", "Enable or Disable Bid Tape Management", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableBidTapeRegistration", "Enable or Disable Bid Tape Registration", "Enable or Disable Bid Tape Registration", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableCorrespondentMaster", "Enable or Disable Correspondent Master Commitment", "Enable or Disable Correspondent Master Commitment", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableFMPMandGSE", "Enable or Disable GSE Commitments and Fannie Mae PE MBS Pool Type", "Enable or Disable GSE Commitments and Fannie Mae PE MBS Pool Type", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableAutoMasterCommitmentNumber", "Enable or Disable Auto Numbering Master Commitment", "Enable or Disable Auto Numbering Master Commitment", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.NextMasterCommitmentNumber", "Next Master Commitment Number", "Next Master Commitment Number", SettingTargetSystem.All, 10, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableAutoCommitmentNumber", "Enable or Disable Auto Numbering Correspondent Trade", "Enable or Disable Auto Numbering Correspondent Trade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.NextCommitmentNumber", "Next Commitment Number", "Next Commitment Number", SettingTargetSystem.All, 15, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.LoanTradeUpdateAllLoans", "Apply LT field selections to all updated loans", "Apply LT field selections to all updaetd loans", SettingTargetSystem.All, 15, "True", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.LoanTradeApplyImmediately", "Updated selections immediately to Loan Trade", "Updated selections immediately to Loan Trade", SettingTargetSystem.All, 15, "False", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.MBSUpdateAllLoans", "Apply MBS field selections to all updated loans", "Apply MBS field selections to all updaetd loans", SettingTargetSystem.All, 15, "True", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.MBSApplyImmediately", "Updated selections immediately to MBS", "Updated selections immediately to MBS", SettingTargetSystem.All, 15, "False", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.AllowPublishEvent", "Enable or Disable Allow Publish event for Trades", "Enable or Disable Allow Publish event for Trades", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Migration.EnableTPOMigrationTool", "Enable TPO Migration Tool", "Enable TPO Migration Tool", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.LOCompensation", "LO Compensation", "Enable or Disable LO Compensation AutoFill.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Components.ENABLEFASTLOANLOAD", "Loan Open Performance Improvements", "Enable or Disable Loan Open Performance Improvements.", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Enabled, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableAutoCreationCT", "Enable or Disable Auto Creation CT for Individual Delivery", "Enable or Disable Auto Creation CT for Individual Delivery", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.AllowBestEfforts", "Allow Best Efforts", "Allow Best Efforts", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.DefaultTradeTab", "Default Tab In Trade Management", "EDefault Tab In Trade Management", SettingTargetSystem.All, 30, "LoanTrade", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EnableTPOTradeManagement", "Enable Trade Management Tab in External Org Settings", "Enable Trade Management Tab in External Org Settings", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.EPPSLoanProgEliPricing", " Enable EPPS Loan Program and Pricing Settings", "Enable EPPS Loan Program and Pricing Settings", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.LoanAssiToCorrTrade", "LoanAssiToCorrTrade", "LoanAssiToCorrTrade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.LoanDeleFromCorrTrade", "LoanDeleFromCorrTrade", "LoanDeleFromCorrTrade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.LoanEliCorrTrade", "LoanEliCorrTrade", "LoanEliCorrTrade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.ReceiveComConf", "ReceiveComConf", "ReceiveComConf", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.RequestPairOff", "RequestPairOff", "RequestPairOff", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.ViewCorrMasterCom", "ViewCorrMasterCom", "ViewCorrMasterCom", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.ViewCorrTrade", "ViewCorrTrade", "ViewCorrTrade", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Trade.PendingTradesWaitTime", "PendingTradesWaitTime", "PendingTradesWaitTime", SettingTargetSystem.All, 10, "20", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Trade.TradeLoanUpdateKafka", "TradeLoanUpdateKafka", "TradeLoanUpdateKafka", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLockDeskSchedule", "Enable or Disable Lock Desk Schedule", "Enable or Disable Lock Desk Schedule", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPRet", "Enable ONRP Retail Channel", "Enable ONRP Retail Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPBroker", "Enable ONRP Wholesale Channel", "Enable ONRP Wholesale Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPCor", "Enable ONRP Correspondent Channel", "Enable ONRP Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ONRPCancelledExpiredLocksCor", "Allow non-delivered Cancelled/Expired Locks for Correspondent Channel", "Allow non-delivered Cancelled/Expired Locks for Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ONRPRetCvrg", "ONRP Coverage Type for Retail Channel", "ONRP Coverage Type for Retail Channel", SettingTargetSystem.All, typeof (ONRPCoverageType), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ONRPCoverageType)), (object) ONRPCoverageType.None, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ONRPBrokerCvrg", "ONRP Coverage Type for Wholesale Channel", "ONRP Coverage Type for Wholesale Channel", SettingTargetSystem.All, typeof (ONRPCoverageType), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ONRPCoverageType)), (object) ONRPCoverageType.None, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ONRPCorCvrg", "ONRP Coverage Type for Correspondent Channel", "ONRP Coverage Type for Correspondent Channel", SettingTargetSystem.All, typeof (ONRPCoverageType), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ONRPCoverageType)), (object) ONRPCoverageType.None, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPRetEndTime", "ONRP Retail Coverage End Time", "ONRP Retail Coverage End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPBrokerEndTime", "ONRP Wholesale Coverage End Time", "ONRP Wholesale Coverage End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPCorEndTime", "ONRP Correspondent Coverage End Time", "ONRP Correspondent Coverage End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPWHRetCvrg", "Enable ONRP Weekend/ Holiday Coverage for Retail Channel", "Enable ONRP Weekend/ Holiday Coverage for Retail Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPWHBrokerCvrg", "Enable ONRP Weekend/ Holiday Coverage for Wholesale Channel", "Enable ONRP Weekend/ Holiday Coverage for Wholesale Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableONRPWHCorCvrg", "Enable ONRP Weekend/ Holiday Coverage for Correspondent Channel", "Enable ONRP Weekend/ Holiday Coverage for Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ONRPNoMaxLimitRet", "No ONRP Maximum Limit for Retail Channel", "No ONRP Maximum Limit for Retail Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ONRPNoMaxLimitBroker", "No ONRP Maximum Limit for Wholesale Channel", "No ONRP Maximum Limit for Wholesale Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ONRPNoMaxLimitCor", "No ONRP Maximum Limit for Correspondent Channel", "No ONRP Maximum Limit for Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPRetDolLimit", "ONRP Retail Dollar Limit", "ONRP Retail Dollar Limit", SettingTargetSystem.All, 3, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPBrokerDolLimit", "ONRP Wholesale Dollar Limit", "ONRP Wholesale Dollar Limit", SettingTargetSystem.All, 3, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPCorDolLimit", "ONRP Correspondent Dollar Limit", "ONRP Correspondent Dollar Limit", SettingTargetSystem.All, 3, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPRetDolTol", "ONRP Retail Dollar Tolerance", "ONRP Retail Dollar Tolerance", SettingTargetSystem.All, 3, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPBrokerDolTol", "ONRP Wholesale Dollar Tolerance", "ONRP Wholesale Dollar Tolerance", SettingTargetSystem.All, 3, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPCorDolTol", "ONRP Correspondent Dollar Tolerance", "ONRP Correspondent Dollar Tolerance", SettingTargetSystem.All, 4, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPOverLimitMsgAddendum", "ONRP Over Limit Message Addendum", "ONRP Over Limit Message Addendum", SettingTargetSystem.All, 160, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEALLCHANNEL", "Enable All Channel", "Enable or Disable All Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPRETSAT", "Enable ONRP Staturday Hours for Retail Channel", "Enable ONRP Staturday Hours for Retail Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPRETSUN", "Enable ONRP Sunday Hours for Retail Channel", "Enable ONRP Sunday Hours for Retail Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPRETSATENDTIME", "ONRP Retail Coverage Saturday End Time", "ONRP Retail Coverage Saturday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPRETSUNENDTIME", "ONRP Retail Coverage Sunday End Time", "ONRP Retail Coverage Sunday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPBROKERSAT", "Enable ONRP Staturday Hours for Broker Channel", "Enable ONRP Staturday Hours for Broker Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPBROKERSUN", "Enable ONRP Sunday Hours for Broker Channel", "Enable ONRP Sunday Hours for Broker Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPBROKERSATENDTIME", "ONRP Wholesale Coverage Saturday End Time", "ONRP Wholesale Coverage Saturday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPBROKERSUNENDTIME", "ONRP Wholesale Coverage Sunday End Time", "ONRP Wholesale Coverage Sunday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPCORSAT", "Enable ONRP Staturday Hours for Correspondent Channel", "Enable ONRP Staturday Hours for Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEONRPCORSUN", "Enable ONRP Sunday Hours for Correspondent Channel", "Enable ONRP Sunday Hours for Correspondent Channel", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPCORSATENDTIME", "ONRP Correspondent Coverage Saturday End Time", "ONRP Correspondent Coverage Saturday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ONRPCORSUNENDTIME", "ONRP Correspondent Coverage Sunday End Time", "ONRP Correspondent Coverage Sunday End Time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDRETOnly", "Enable or Disable Lock Desk Schedule", "Enable or Disable Lock Desk Schedule", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDHRMsg", "Lock Desk Hours Message", "Lock Desk Hours Message (character limit 250)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RETLDALLOWACTIVERELOCK", "Allow Active Relock Requests during lock down shutdown", "Allow Active Relock Requests during lock down shutdown", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RETLDShutDown", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSHUTDOWNMSG", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSatEndTime", "Retail Lock desk end time", "Retail Lock desk end time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDRETSat", "Enable Saturday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSatSTRTime", "Saturday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSunEndTime", "Sunday Lock Desk End time", "Sunday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDRETSun", "Enable Sunday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSunSTRTime", "Sunday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDSTRTime", "Weekday Lock Desk Start time", "Weekday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.RETLDENDTIME", "Weekday Lock Desk End time", "Weekday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDBROKEROnly", "Enable or Disable Lock Desk Schedule", "Enable or Disable Lock Desk Schedule", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDHRMsg", "Lock Desk Hours Message", "Lock Desk Hours Message (character limit 250)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.BROKERLDALLOWACTIVERELOCK", "Allow Active Relock Requests during lock down shutdown", "Allow Active Relock Requests during lock down shutdown", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.BROKERLDShutDown", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSHUTDOWNMSG", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSatEndTime", "Broker Lock desk end time", "Broker Lock desk end time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDBROKERSat", "Enable Saturday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSatSTRTime", "Saturday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSunEndTime", "Sunday Lock Desk End time", "Sunday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDBROKERSun", "Enable Sunday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSunSTRTime", "Sunday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDSTRTime", "Weekday Lock Desk Start time", "Weekday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.BROKERLDENDTIME", "Weekday Lock Desk End time", "Weekday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDCOROnly", "Enable or Disable Lock Desk Schedule", "Enable or Disable Lock Desk Schedule", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDHRMsg", "Lock Desk Hours Message", "Lock Desk Hours Message (character limit 250)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CORLDALLOWACTIVERELOCK", "Allow Active Relock Requests during lock down shutdown", "Allow Active Relock Requests during lock down shutdown", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CORLDShutDown", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSHUTDOWNMSG", "Shut Down Lock Desk-Temporary", "Shut Down Lock Desk (Temporary)", SettingTargetSystem.All, 250, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSatEndTime", "Correspondent Lock desk end time", "Correspondent Lock desk end time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDCORSat", "Enable Saturday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSatSTRTime", "Saturday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSunEndTime", "Sunday Lock Desk End time", "Sunday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLDCORSun", "Enable Sunday Lock Desk Hours", "Enable Saturday Lock Desk Hours", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSunSTRTime", "Sunday Lock Desk Start time", "Saturday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDSTRTime", "Weekday Lock Desk Start time", "Weekday Lock Desk Start time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CORLDENDTIME", "Weekday Lock Desk End time", "Weekday Lock Desk End time", SettingTargetSystem.All, 512, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableCommitmentTermFields", "Enable or Disable Commitment Term fields", "Enable or Disable Commitment Term fields", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.EnableLockSnapshotRecapture", "Allow Lock Snapshot Recapture", "Enable or Disable Lock Snapshot Recapture validation upon loan saving", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("SQL.SqlRead", "SQL read data source", "SQL read data source.", SettingTargetSystem.All, -1, 2, -1, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Internal.GetScopedUsers", "GetScopedUsers API", "GetScopedUsers API", SettingTargetSystem.All, 0, 2, 0, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Internal.MultiServer", "Multi-Server Environment", "Multi-Server Environment", SettingTargetSystem.Server, 0, 1024, 0, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Internal.MaxConcurrentLogins", "Max Concurrent Logins", "Maximum number of concurrent logins", SettingTargetSystem.Server, 0, (int) short.MaxValue, 0, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Internal.LoanSaveDeleteInsertLoanSummary", "LoanSave Delete/Insert LoanSummary", "LoanSave delete from then insert into LoanSummary", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Internal.RebuildReportingDbThreadCount", "Rebuild Reporting DB Thread Count", "Number of thresds for rebuilding reporting database", SettingTargetSystem.All, 1, 8, 1, true, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Internal.MaxRecentLoans", "Max Number of Recent Loans", "Maximum number of recent loans in the recent_loans table", SettingTargetSystem.All, 0, 10000, 0, true, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.DeferrableLoanProcessMode", "Deferrable Loan Process", "Deferred or Realtime loan process (deferrable portion of loan process).", SettingTargetSystem.All, typeof (DeferrableLoanProcessMode), (object) DeferrableLoanProcessMode.RealTime, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.DeferrableENCAllowedActivities", "Encompass allowed deferrable activities", "Flag bank for Encompass allowed deferrable activities", SettingTargetSystem.All, 0, (int) ushort.MaxValue, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.DeferrableEBSAllowedActivities", "EBS allowed deferrable activities", "Flag bank for EBS allowed deferrable activities", SettingTargetSystem.All, 0, (int) ushort.MaxValue, (int) ushort.MaxValue, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.DeferrableEBSV3AllowedActivities", "EBS V3 allowed deferrable activities", "Flag bank for EBS V3 allowed deferrable activities", SettingTargetSystem.All, 0, (int) ushort.MaxValue, (int) ushort.MaxValue, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LoanEventPublishingEnable", "Enable Loan Event Publishing", "Loan Event Publishing for Async Message Processing", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanEventPublishDelayMs", "Publish Loan Event Delay Period in milliseconds", "Delay used for testing the circuit breaker and timeout policy for loan events", SettingTargetSystem.All, 0, 600000, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanEventPublishCircuitResetMs", "Loan Event Publish Circuit Breaker Reset Time in milliseconds", "The time period in milliseconds for the circuit breaker to test the downstream call again", SettingTargetSystem.All, 1000, 600000, 60000, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.ServerEventLogOverrideLocation", "Event Log Override", "Override Path for Logging Failed Server Events for Republishing", SettingTargetSystem.All, 256, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("License.EnableAIQLicense", "Enable Data & Document Automation and Mortgage Analyzers License flag for webhook publishing", "Loan Event Publishing for Async Message Processing", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableUIHomeInsurance", "Enable UI Home Owners Insurance.", "Kafka Event publishing to loan.change kafka topic if enabled", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.HazelCastOperationDelayInMs", "HazelCast Operation Delay Period in milliseconds", "Delay used for testing the circuit breaker and timeout policy for hazelcast operations", SettingTargetSystem.All, 0, 600000, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.HazelCastOperationDummyException", "Dummy Exception for HazelCast Operations", "Dummy Exception for HazelCast Operations for QA testing", SettingTargetSystem.All, 0, 1, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DataLakeEnabled", "Enable DataLake integration", "DataLake Integration and Posting loan data for Analytics", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DataLakeUseGenericIngestEndPoint", "Use DataLakeUse GenericIngest EndPoint", "DataLake Integration using Generic Ingest EndPoint", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.WebHookEnabled", "Enable WebHook Publishing", "WebHook Integration", SettingTargetSystem.All, true, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ServerSideConversion", "Enable Server Side Conversion", "Enable server side image conversion", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.DataExtraction", "Enable Server Side Data Extraction", "Enable server side data extraction", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.PublishDeferredLPConfirmTimeout", "Publish Deferred Loan Process Confirm Timeout in milliseconds", "Timeout for confirming deferred loan process publishing in milliseconds", SettingTargetSystem.All, 1, 600000, 3000, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.PublishLoanEventConfirmTimeout", "Publish Loan Event Confirm Timeout in milliseconds", "Timeout for confirming loan event publishing in milliseconds", SettingTargetSystem.All, 1, 600000, 3000, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnablePaymentHistoryAndCalc", "Enable or Disable Payment History and Calculations", "Enable or Disable Payment History and Calculations", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableEscrowDetailsAndCalc", "Enable or Disable Escrow Details and Calculations", "Enable or Disable Escrow Details and Calculations", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.CutoffCalendarDay", "Cutoff Calendar Day", "Cutoff Calendar Day", SettingTargetSystem.All, 2, "14", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.NumberOfMonths", "Number Of Months", "Number Of Months", SettingTargetSystem.All, 2, "12", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.PerDiemInterestDaysPerYear", "Per Diem Interest Days Per Year", "Per Diem Interest Days Per Year", SettingTargetSystem.All, 3, "365", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.PerDiemInterestRounding", "Per Diem Interest Rounding", "Per Diem Interest Rounding", SettingTargetSystem.All, 512, "2 Decimals", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("FEATURE.ENABLECONCURRENTDOCUMENTUPDATE", "Enable or Disable Concurrent Document Batch Update", "Enable or Disable Concurrent Document Batch Update", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("FEATURE.ENABLEWORKFLOWTASKS", "Enable or Disable ENABLE WORKFLOW TASKS", "Enable or Disable ENABLE WORKFLOW TASKS", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableDDMPerformance", "Enable DDM Performance Improvement", "Enable DDM Performance Improvement", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Client.ENHANCEDCONDITIONSETTINGS", "Enable Enhanced Condition Settings", "Enable Enhanced Condition Settings", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Client.ALLOWNOTIFICATIONS", "Enable Notifications", "Enable Notifications", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CORRESPONDENT", "Enable or Disable Correspondent Compliance Review Data", "Enable or Disable Correspondent Compliance Review Data", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowPurchaseCondition", "Allow Purchase Condition", "Allow Purchase Condition", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowConfigurableKeyDates", "Allow Configurable Key Dates", "Allow Configurable Key Dates", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanVersionRetentionPeriodDays", "Retention period for loan version", "Indicates how many days loan version file should be present in sif location", SettingTargetSystem.All, 1, 90, 7, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanVersCleanupDurationInMins", "cleanup time for loan versions", "Indicates  server task can clean up the loan version files in hour", SettingTargetSystem.All, 50, 59, 59, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanVersCleanupPercentageCount", "cleanup percentage count for loan versions", "Indicates  server task can clean up percentage of the loan version files in hour", SettingTargetSystem.All, 0, 50, 0, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.LoanVersCleanupMaxRecordCount", "cleanup record counts for loan version", "Indicates cleanup record counts to cleanup for loan version files in one hour", SettingTargetSystem.All, 25000, 35000, 25000, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LoanVersCleanupOffHoursEnabled", "Enable or Disable off hours cleanup time for loan versions", "Indicates wheter server task can clean up the loan version files in off hours or not.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("AttachmentMetadataMigration.MaxDaysOfNoActivityForMigration", "Retention period for attachments", "Indicates the retention period of the attachments present in the DB.", SettingTargetSystem.All, 10, "60|180", false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("AttachmentMetadataMigration.MaxJobDurationInMins", "Duration of the attachment migration", "Indicates the duration of the job in which the attachment migration needs to happen.", SettingTargetSystem.All, 50, 59, 40, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("AttachmentMetadataMigration.MaxLoanCountToMigratePerJob", "Maximum number of loans to be processed in the given time.", "Indicates how many records can be processed in a single batch", SettingTargetSystem.All, 1000, 100000, 2000, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("AttachmentMetadataMigration.EnableAttachmentMigrationToCifs", "Boolean flag to enable attachment migration to CIFS", "Indicates whether the attachments need to be migrated to CIFS or not.", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Esign.EsignOption", "NG Admin URL Toggle", "NG Admin URL Toggle", SettingTargetSystem.All, 1, "0", false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.PipelineSearchMode", "Pipeline Search Mode", "Determines which database is used to populate/search Pipeline", SettingTargetSystem.All, typeof (PipelineSearchMode), (object) PipelineSearchMode.Default, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.KafkaEventPublishCircuitResetMs", "Kafka Event Publish Circuit Breaker Reset Time in milliseconds", "The time period in milliseconds for the circuit breaker to test the downstream call again", SettingTargetSystem.All, 1000, 600000, 60000, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("CountyLimits.Selection", "Name of selected radio button", "Determines which radio button was last clicked by user", SettingTargetSystem.All, 100, "rdbJan2018", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("ConventionalCountyLimits.Selection", "Name of selected radio button", "Determines which radio button was last clicked by user", SettingTargetSystem.All, 100, "rdb2023", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("ConventionalCountyLimits.CountyLimitURL", "URL for conventional county limit", "", SettingTargetSystem.All, 256, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableBidTape", "Enable or Disable Bid Tape Feature", "Enable or Disable Bid Tape Feature", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("LoanStorage.SupportingData", "Loan Storage Supporting Data", "Loan Storage Supporting Data", SettingTargetSystem.All, 100, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AutoConversion", "Enable or Disable Automatic Conversion", "Enable or Disable Automatic Conversion of Native Attachments into Image Attachments", SettingTargetSystem.All, true, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableAutoOrgIdNumbering", "Enable or Disable Auto Org Id Numbering", "Enable or Disable Auto Org Id Numbering feature", SettingTargetSystem.All, false, true, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.StartingOrgIdNumber", "Starting Number for Auto-generating Org Id", "Starting Number for Auto-generating Org Id", SettingTargetSystem.All, 100, "", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.NextOrgIdNumber", "Next Org Id Number", "Determines the next number in sequence for auto generating Org Id", SettingTargetSystem.All, 100, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.SKIPCUSTOMCALCSEXECONLOANOPEN", "Skip execution of Custom Calc during Loan Open", "Allow or Deny running custom calc as part of Loan Open", SettingTargetSystem.All, true, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CollectLanguagePreference", "URLA - Collect Language Preference", "Allow or Deny to render language preference section for borrower or coborrower", SettingTargetSystem.All, true, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.CollectHomeownershipCounseling", "URLA - Collect Homeownership Counseling", "Allow or Deny to render homeownership counseling", SettingTargetSystem.All, true, false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("LoanStorage.AttachmentsMetaData", "LoanStorage AttachmentsMetaData", "Determines whether the attachments is to be saved in database or file system", SettingTargetSystem.All, 100, "", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENHANCEDCONDITIONSWORKFLOW", "Enhanced Condition Workflow", "Enable Enhanced Conditions Workflow", SettingTargetSystem.Banker, false, false, true));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.ENHANCEDCONDITIONSWORKFLOWSTDATE", "Enhanced Condition Workflow Start Date", "Set Date to Use Enhanced Condition Workflow Start Date", SettingTargetSystem.Banker, Utils.ParseDate((object) DateTime.Now.ToString("MM/dd/yyyy")), false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("FEATURE.ENABLE_WORKFLOW_RULES", "Enable or Disable ENABLE WORKFLOW RULES", "Enable or Disable ENABLE WORKFLOW RULES", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("FEATURE.ENABLE_WORKFLOW_NOTIFICATIONS", "Enable or Disable ENABLE WORKFLOW NOTIFICATIONS", "Enable or Disable ENABLE WORKFLOW NOTIFICATIONS", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Feature.SHOWLOANSAVEPROGRESS", "Show Loan Save Progress", "Enable or Disable Show Loan Save Progress", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Client.USEPIPELINETABSTARTUP", "Show Pipeline Tab at Startup", "Enable or Disable Use Pipeline Tab Startup", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("POLICIES.EnabledReportingDbWebhook", "Enable ReportingDb Webhook", "Enable or Disable ReportingDb Webhook", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("POLICIES.UsePiplineOptimization", "Enable PiplineOptimization", "Enable or Disable PiplineOptimization", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("POLICIES.WebIFBRenderingEngine", "For Web IFB Rendering Engine feature toggle", "Determines whether to use React or Angular for Web IFB Rendering Engine", SettingTargetSystem.All, 100, "react", false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Client.EnableTokenLoginOnly", "Enable Web Login", "Enable web login window", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Policies.PRICEBASEDQMDEFINATIONDATE", "Use Price Based General QM Definition Date", "Use Price Based General QM Definition Date", SettingTargetSystem.All, Utils.ParseDate((object) "10/1/2022"), false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Policies.ARMIndexPrecision", "ARM Index Precision", "ARM Index Precision", SettingTargetSystem.All, typeof (ARMIndexPrecisionEnum), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ARMIndexPrecisionEnum)), (object) ARMIndexPrecisionEnum.ThreeDecimals, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ENABLEGEICOINTEGRATION", "Consumer Can Order Home Insurance on ECC", "Consumer Can Order Home Insurance on ECC", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.VALIDATESYSRULEPRIORORDERINGDOC", "Validate all system rules prior to Ordering Docs", "Validate all system rules prior to Ordering Docs", SettingTargetSystem.All, false, false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.DEFAULTINTERNALORGID", "Default Org Id for creating an internal user", "Default Org Id for creating an internal user.", SettingTargetSystem.All, 10, "", false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.DEFAULTPERSONAID", "Default Persona Id for creating an internal user", "Default Persona Id for creating an internal user.", SettingTargetSystem.All, 10, "", false, true));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.DEFAULTWORKINGFOLDER", "Default Working Folder for creating an internal user", "Default Working Folder for creating an internal user.", SettingTargetSystem.All, (int) byte.MaxValue, "", false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.AllowUserToDiscardPackage", "Allow user to discard an approved but undelivered package", "Enable or Disabled Allow user to discard an approved but undelivered package", SettingTargetSystem.Banker, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.AllowHybridWithENoteClosing", "Allow \"Hybrid with eNote\" Closing", "Enable or Disabled Allow Hybrid with eNote Closing", SettingTargetSystem.Banker, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.AllowClosingPackageTPseClosing", "Allow user to send a closing package to Third Parties", "Enable or Disabled Allow user to send a closing package to Third Parties", SettingTargetSystem.Banker, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.PackageExpirationDefaultDays", "Package expiration default days", "Select Package expiration default days", SettingTargetSystem.Banker, typeof (PackageExpirationDaysSettings), (IEnumNameProvider) new EnumDescriptionNameProvider(typeof (PackageExpirationDaysSettings)), (object) PackageExpirationDaysSettings.DayofSigning, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.PackagePreview", "Package Preview", "Select Package Preview", SettingTargetSystem.Banker, typeof (PackagePreviewSettings), (IEnumNameProvider) new EnumDescriptionNameProvider(typeof (PackagePreviewSettings)), (object) PackagePreviewSettings.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("eClose.ApproveSigningDefaultDate", "Approve for signing default date", "Select Approve for signing default date", SettingTargetSystem.Banker, typeof (ApproveSigningDateSettings), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (ApproveSigningDateSettings)), (object) ApproveSigningDateSettings.TodaysDate, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockUpdateExtensionFees", "Extension Fees", "Extension Fees", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockUpdateCustomPriceAdjustments", "Custom Price Adjustments", "Custom Price Adjustments", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockUpdatePriceConcessions", "Price Concessions", "Price Concessions", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockUpdateReLockfees", "Re-Lock fees", "Re-Lock fees", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ReLockExtensionFees", "Extension Fees", "Extension Fees for Re-Locks", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ReLockCustomPriceAdjustments", "Custom Price Adjustments", "Custom Price Adjustments for Re-Locks", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ReLockPriceConcessions", "Price Concessions", "Price Concessions for Re-Locks", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ReLockReLockfees", "Re-Lock fees", "Re-Lock fee for Re-Lockss", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.WorstCasePrice", "Use Worst Case Price prior or equal to", "Use Worst Case Price prior or equal to XX days of Lock Expiration or Cancellation Date", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.WaiveFee", "Waive Fees After", "Waive Fees Afte", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.RestrictLockPeriod", "Restrict Lock Period of Re-Lock to not exceed the Original Lock period of Initial Lock", "Restrict Lock Period of Re-Lock to not exceed the Original Lock period of Initial Lock", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.WorstCasePriceEqualDays", "Worst Case Price Equal Days", "Days of Lock Expiration or Cancellation Date", SettingTargetSystem.All, 512, "0", false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Policies.WaiveFeeAfterDays", "Waive Fee After Days", "Days of Lock Expiration or Cancellation Date", SettingTargetSystem.All, 512, "0", false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("FEATURE.RebuildPipelineMaxThreadCount", "Max # of threads for pipeline rebuild", "Maximum number of threads allowed for parallel pipeline rebuild.", SettingTargetSystem.All, 1, 8, 8, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockUpdateandLockConfirm", "Lock Update and Confirm", "Lock Update and Confirm", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.AllowPPESelection", "Allow PPE selection on Lock Request Form and Secondary Lock Tool", "Allow PPE selection on Lock Request Form and Secondary Lock Tool", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.LockAutoValidate", "Lock Auto Validate", "Auto Validate Changes for Active Locks", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Policies.UsersClientCacheExpirationTime", "Expiration time in secs for client side users cache", "Expiration time in secs for client side users cache", SettingTargetSystem.All, 30, 28800, 30, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Automated Data Completion.HomeCounseling", "Home Counselors", "Home Counseling", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Automated Data Completion.AreaMedianIncome", "Area Median Income (AMI)", "Area Median Income (AMI)", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Automated Data Completion.MedianFamilyIncome", "Median Family Income (MFI)", "Median Family Income (MFI)", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, true));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.EnableLoanSoftArchival", "Soft Archival of Loan", "Enable Soft archival of old loans.", SettingTargetSystem.All, false, true, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Policies.ShowAdditionalTerritories", "Show Additional US Territories", "Show Additional US Territories.", SettingTargetSystem.All, false, true, false));
      SettingDefinitions.initCategoryList();
    }

    private static void add(SettingDefinition def)
    {
      SettingDefinitions.settingDefs.Add((object) def.Path, (object) def);
      SettingDefinitions.settingList.Add((object) def);
    }

    public static string[] Categories => SettingDefinitions.categories;

    public static string[] GetDisplayCategories(SettingTargetSystem appliesTo)
    {
      ArrayList arrayList = new ArrayList();
      foreach (SettingDefinition settingDefinition in (IEnumerable) SettingDefinitions.settingDefs.Values)
      {
        if (settingDefinition.DisplayEnabled && settingDefinition.DoesApplyTo(appliesTo) && !arrayList.Contains((object) settingDefinition.Category))
          arrayList.Add((object) settingDefinition.Category);
      }
      arrayList.Sort();
      return (string[]) arrayList.ToArray(typeof (string));
    }

    public static IDictionary GetSettingDefinitions()
    {
      return (IDictionary) SettingDefinitions.settingDefs.Clone();
    }

    public static IDictionary GetSettingDefinitions(string category)
    {
      Hashtable settingDefinitions = new Hashtable();
      foreach (SettingDefinition settingDefinition in (IEnumerable) SettingDefinitions.settingDefs.Values)
      {
        if (settingDefinition.Category.Equals(category, StringComparison.CurrentCultureIgnoreCase))
          settingDefinitions.Add((object) settingDefinition.Path, (object) settingDefinition);
      }
      return (IDictionary) settingDefinitions;
    }

    public static IList GetOrderedDefinitions(string category, SettingTargetSystem appliesTo)
    {
      ArrayList orderedDefinitions = new ArrayList();
      foreach (SettingDefinition setting in SettingDefinitions.settingList)
      {
        if (setting.Category == category && setting.DoesApplyTo(appliesTo))
          orderedDefinitions.Add((object) setting);
      }
      return (IList) orderedDefinitions;
    }

    public static IDictionary GetSettingDefinitions(string category, SettingTargetSystem appliesTo)
    {
      Hashtable settingDefinitions = new Hashtable();
      foreach (SettingDefinition settingDefinition in (IEnumerable) SettingDefinitions.settingDefs.Values)
      {
        if (settingDefinition.Category == category && settingDefinition.DoesApplyTo(appliesTo))
          settingDefinitions.Add((object) settingDefinition.Path, (object) settingDefinition);
      }
      return (IDictionary) settingDefinitions;
    }

    public static SettingDefinition GetSettingDefinition(string path)
    {
      return (SettingDefinition) SettingDefinitions.settingDefs[(object) path];
    }

    private static void initCategoryList()
    {
      ArrayList arrayList = new ArrayList();
      foreach (SettingDefinition settingDefinition in (IEnumerable) SettingDefinitions.settingDefs.Values)
      {
        if (!arrayList.Contains((object) settingDefinition.Category))
          arrayList.Add((object) settingDefinition.Category);
      }
      arrayList.Sort();
      SettingDefinitions.categories = (string[]) arrayList.ToArray(typeof (string));
    }

    public static string LockoutPeridEnumToString(PasswordFailureLockoutPeriod definition)
    {
      foreach (MemberInfo member in typeof (PasswordFailureLockoutPeriod).GetMembers())
      {
        if (member.Name == definition.ToString())
        {
          object[] customAttributes = member.GetCustomAttributes(typeof (DescriptionAttribute), false);
          if (customAttributes.Length != 0)
            return ((DescriptionAttribute) customAttributes[0]).Description;
        }
      }
      return string.Empty;
    }

    public static PasswordFailureLockoutPeriod LockoutPeriodStringToEnum(
      string lockoutPeriodDescription)
    {
      switch (lockoutPeriodDescription.ToLower())
      {
        case "5 minutes":
          return PasswordFailureLockoutPeriod.Five;
        case "10 minutes":
          return PasswordFailureLockoutPeriod.Ten;
        case "15 minutes":
          return PasswordFailureLockoutPeriod.Fifteen;
        case "30 minutes":
          return PasswordFailureLockoutPeriod.Thirty;
        default:
          return PasswordFailureLockoutPeriod.Fifteen;
      }
    }

    public static void AddSettingsForTesting()
    {
      if (SettingDefinitions.settingsForTestingAdded)
        return;
      SettingDefinitions.settingsForTestingAdded = true;
      SettingDefinitions.add((SettingDefinition) new BitmaskSettingDefinition("Testing.BitmaskSetting", "Testing BitmaskSetting", "Testing BitmaskSetting", SettingTargetSystem.All, typeof (GFEPrintingDefault), (IEnumNameProvider) new BitmaskEnumNameProvider(typeof (GFEPrintingDefault), (IEnumNameProvider) new MultiWordEnumNameProvider(typeof (GFEPrintingDefault))), (object) (GFEPrintingDefault.Itemization | GFEPrintingDefault.BrokerEx), false, false));
      SettingDefinitions.add((SettingDefinition) new BooleanSettingDefinition("Testing.BooleanSetting", "Testing BooleanSetting", "Testing BooleanSetting", SettingTargetSystem.All, false, false, false));
      SettingDefinitions.add((SettingDefinition) new DateTimeSettingDefinition("Testing.DateTimeSetting", "Testing DateTimeSetting", "Testing DateTimeSetting", SettingTargetSystem.All, DateTime.MinValue, false, false));
      SettingDefinitions.add((SettingDefinition) new DecimalSettingDefinition("Testing.DecimalSetting", "Testing DecimalSetting", "Testing DecimalSetting", SettingTargetSystem.All, 3, 0M, false, false));
      SettingDefinitions.add((SettingDefinition) new DoubleSettingDefinition("Testing.DoubleSetting", "Testing DoubleSetting", "Testing DoubleSetting", SettingTargetSystem.All, 3, 0.0, false, false));
      SettingDefinitions.add((SettingDefinition) new EnumSettingDefinition("Testing.EnumSetting", "Testing EnumSetting", "Testing EnumSetting", SettingTargetSystem.All, typeof (EnableDisableSetting), (object) EnableDisableSetting.Disabled, false, false));
      SettingDefinitions.add((SettingDefinition) new IntegerSettingDefinition("Testing.IntegerSetting", "Testing IntegerSetting", "Testing IntegerSetting", SettingTargetSystem.All, 0, 100, 50, false, false));
      SettingDefinitions.add((SettingDefinition) new StringSettingDefinition("Testing.StringSetting", "Testing StringSetting", "Testing StringSetting", SettingTargetSystem.All, 1024, (string) null, false, false));
      SettingDefinitions.initCategoryList();
    }
  }
}
