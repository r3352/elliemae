// Decompiled with JetBrains decompiler
// Type: EllieMae.EMLite.DataEngine.DDMRuleCodeGenerator
// Assembly: EMLoanUtils15, Version=1.5.1.0, Culture=neutral, PublicKeyToken=d11ef57bba4acf91
// MVID: 127DBDC4-524E-4934-8841-1513BEA889CD
// Assembly location: C:\SmartClientCache\Apps\UAC\Ellie Mae\xIHR5EqGa7zPnRG0YpD5z4TPAB0=\Encompass360\EMLoanUtils15.dll

using RazorEngine.Configuration;
using RazorEngine.Templating;
using System;
using System.Collections.Generic;

#nullable disable
namespace EllieMae.EMLite.DataEngine
{
  public class DDMRuleCodeGenerator
  {
    private const string TEMP_KEY_FEERULE = "DDMTemplateForFeeRule�";
    private const string TEMP_KEY_DATATABLE = "DDMTemplateForDataTable�";
    private const string TEMP_KEY_ALL_FEERULES = "DDMTemplateForAllFeeRules�";
    private Type _vmTypeFeeRule = typeof (DDMVmFeeRule);
    private Type _vmTypeDataTable = typeof (DDMVmDataTable);
    private Type _vmTypeAllFeeRules = typeof (List<string>);
    private static IRazorEngineService _razorEngineService;
    private static Lazy<DDMRuleCodeGenerator> _instance = new Lazy<DDMRuleCodeGenerator>((Func<DDMRuleCodeGenerator>) (() => new DDMRuleCodeGenerator()));
    private const string TEMPLATE_ALL_FEERULES = "\r\n'Any global settings for running the all DDM FeeRules\r\nDim byPass As Boolean\r\nDim conditionPass As Boolean\r\n\r\n@for(int i = 0; i < Model.Count; i++) {\r\n    @:@Raw(Model[i])\r\n}\r\n�";
    private const string TEMPLATE_FEERULE = "\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    'Line/Group: @Model.Name\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\nTry\r\n    Dim runAlways_@(Model.LineId) As Boolean = True\r\n    Dim byPass_@(Model.LineId) As Boolean\r\n    Dim conditionPass_@(Model.LineId) As Boolean\r\n\r\n    @if (Model.ByPassMode == 0) {\r\n        @:bypass_@(Model.LineId) = False\r\n    }\r\n    else if (Model.ByPassMode == 1) {\r\n        @:bypass_@(Model.LineId) = [DDM:BYPASS_LE] \r\n    }\r\n    else if (Model.ByPassMode == 2) {\r\n        @:bypass_@(Model.LineId) = (@Raw(Model.ByPassAdvancedCode))\r\n    } else {\r\n        @:bypass_@(Model.LineId) = [DDM:BYPASS_LE] OrElse (@Raw(@Model.ByPassAdvancedCode))\r\n    }\r\n    \r\n    conditionPass_@(Model.LineId) = False\r\n    If Not byPass_@(Model.LineId) Then\r\n        'Aggregated conditions\r\n        Dim feeRuleOrder As Integer = -1\r\n        @foreach(var vmCond in Model.Conditions) {\r\n            var printCondOp = false;\r\n            @:If Not conditionPass_@(Model.LineId) AndAlso _\r\n            @:  ( @Raw(@vmCond.EffectiveDateConditionCode) ) AndAlso ( _\r\n            foreach(var cond in vmCond) {\r\n                var andAlso = printCondOp? \"AndAlso\" : \"\";\r\n                if (cond.RunAlways) {\r\n                    @:@andAlso ( runAlways_@(Model.LineId) ) _\r\n                } else if (cond.FormattedLine != null) {\r\n                    @:@andAlso (@Raw(@cond.FormattedLine)) _\r\n                } else if (cond.FieldId == \"DDM:ADVANCEDCODE\") {\r\n                    @:@andAlso (@Raw(@cond.Value )) _\r\n                } else {\r\n                    @:@andAlso ([@cond.FieldId] = \"@Raw(@cond.Value)\" ) _\r\n                }\r\n                printCondOp = true;\r\n            }\r\n            @:) Then\r\n                @:conditionPass_@(Model.LineId) = True\r\n                @:feeRuleOrder = @vmCond.OrdinalId\r\n            @:End If\r\n        }\r\n\r\n        [DDM:CONTEXT:ON] = \"Y\"\r\n        Select Case feeRuleOrder\r\n        @foreach(var vmAction in Model.Actions) {\r\n            @:Case @vmAction.OrdinalId\r\n\r\n                @:[DDM:CONTEXT:] = \"@vmAction.ContextRuleType|@vmAction.ContextRuleName|@vmAction.ContextScenarioName\"\r\n\r\n                foreach(var action in vmAction) {\r\n                    @:Try\r\n\r\n                    if (action.NeedConditionWrapper && !string.IsNullOrEmpty(action.ConditionWrapper))\r\n                    {\r\n                        @:If (@Raw(@action.ConditionWrapper)) Then\r\n                    }\r\n                       if (action.Value.StartsWith(\"DDM(\")) {\r\n                            @:[DDM:CONTEXT:CALCULATION] = \"@Raw(@action.ValueStripped)\"\r\n                            @:[@action.FieldId] = @Raw(@action.Value.Substring(3))\r\n                        } else if (action.Value.StartsWith(\"DDM[\")) {\r\n                            @:[DDM:CONTEXT:TABLE] = \"@Raw(@action.Value.Substring(3))\"\r\n                            @:Dim tableResult As Object\r\n                            @:tableResult = @Raw(@action.Value.Substring(3))\r\n                            @:If tableResult IsNot Nothing Then\r\n                                @:[@action.FieldId] = Convert.ToString(tableResult)\r\n                            @:End If\r\n                         \r\n                        } else {\r\n                            @:[DDM:CONTEXT:REGULAR] = \"@Raw(@action.Value)\"\r\n                            @:[@action.FieldId] = \"@Raw(@action.Value)\"\r\n                        }\r\n\r\n                    if (action.NeedConditionWrapper && !string.IsNullOrEmpty(action.ConditionWrapper))\r\n                    {\r\n                        @:End If\r\n                    }\r\n\r\n                    @:Catch\r\n\r\n                    @:End Try\r\n                }\r\n               \r\n        }\r\n            Case Else\r\n                '\r\n        End Select\r\n    End If\r\nCatch\r\n\r\nEnd Try\r\n[DDM:CONTEXT:ON] = \"N\"\r\n�";
    private const string TEMPLATE_DATATABLE = "\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    'DataTable: @Model.Name\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    Try\r\n    'Aggregated conditions\r\n        Dim conditionPass As Boolean\r\n        Dim dtRowOrder As Integer = -1\r\n        @foreach(var vmCond in Model.Conditions) {\r\n            if (vmCond.Count > 0) {\r\n                var printCondOp = false;\r\n                @:If Not conditionPass AndAlso ( _\r\n                foreach(var cond in vmCond) {\r\n                    var andAlso = printCondOp? \"AndAlso\" : \"\";\r\n                    @:@andAlso (@Raw(@cond.FormattedLine)) _\r\n                    printCondOp = true;\r\n                }\r\n                @:) Then\r\n                    @:conditionPass = True\r\n                    @:dtRowOrder = @vmCond.OrdinalId\r\n                @:End If\r\n            }\r\n        }\r\n\r\n        Select Case dtRowOrder\r\n            @foreach(var vmAction in Model.Actions) {\r\n                @:Case @vmAction.OrdinalId\r\n                    \r\n                    if (vmAction.Count > 0) {\r\n                        @:Dim i As Integer = 0\r\n                        @:Dim OutputList As Object() = New Object(@vmAction.Count){}\r\n                        foreach(var action in vmAction) {\r\n                            @:OutputList(i) = (@Raw(@action.FormattedLine))\r\n                            @:i += 1\r\n                        }\r\n                    }\r\n                    @:Return OutputList\r\n            }\r\n            Case Else\r\n                Return Nothing\r\n        End Select\r\n    Catch\r\n        Return Nothing\r\n    End Try\r\n�";

    public static DDMRuleCodeGenerator Instance => DDMRuleCodeGenerator._instance.Value;

    private DDMRuleCodeGenerator() => this.RecompileTemplate();

    public void RecompileTemplate()
    {
      DDMRuleCodeGenerator._razorEngineService = RazorEngineService.Create((ITemplateServiceConfiguration) new TemplateServiceConfiguration()
      {
        DisableTempFileLocking = true,
        CachingProvider = (ICachingProvider) new DefaultCachingProvider((Action<string>) (t => { }))
      });
      DDMRuleCodeGenerator._razorEngineService.AddTemplate("DDMTemplateForFeeRule", "\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    'Line/Group: @Model.Name\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\nTry\r\n    Dim runAlways_@(Model.LineId) As Boolean = True\r\n    Dim byPass_@(Model.LineId) As Boolean\r\n    Dim conditionPass_@(Model.LineId) As Boolean\r\n\r\n    @if (Model.ByPassMode == 0) {\r\n        @:bypass_@(Model.LineId) = False\r\n    }\r\n    else if (Model.ByPassMode == 1) {\r\n        @:bypass_@(Model.LineId) = [DDM:BYPASS_LE] \r\n    }\r\n    else if (Model.ByPassMode == 2) {\r\n        @:bypass_@(Model.LineId) = (@Raw(Model.ByPassAdvancedCode))\r\n    } else {\r\n        @:bypass_@(Model.LineId) = [DDM:BYPASS_LE] OrElse (@Raw(@Model.ByPassAdvancedCode))\r\n    }\r\n    \r\n    conditionPass_@(Model.LineId) = False\r\n    If Not byPass_@(Model.LineId) Then\r\n        'Aggregated conditions\r\n        Dim feeRuleOrder As Integer = -1\r\n        @foreach(var vmCond in Model.Conditions) {\r\n            var printCondOp = false;\r\n            @:If Not conditionPass_@(Model.LineId) AndAlso _\r\n            @:  ( @Raw(@vmCond.EffectiveDateConditionCode) ) AndAlso ( _\r\n            foreach(var cond in vmCond) {\r\n                var andAlso = printCondOp? \"AndAlso\" : \"\";\r\n                if (cond.RunAlways) {\r\n                    @:@andAlso ( runAlways_@(Model.LineId) ) _\r\n                } else if (cond.FormattedLine != null) {\r\n                    @:@andAlso (@Raw(@cond.FormattedLine)) _\r\n                } else if (cond.FieldId == \"DDM:ADVANCEDCODE\") {\r\n                    @:@andAlso (@Raw(@cond.Value )) _\r\n                } else {\r\n                    @:@andAlso ([@cond.FieldId] = \"@Raw(@cond.Value)\" ) _\r\n                }\r\n                printCondOp = true;\r\n            }\r\n            @:) Then\r\n                @:conditionPass_@(Model.LineId) = True\r\n                @:feeRuleOrder = @vmCond.OrdinalId\r\n            @:End If\r\n        }\r\n\r\n        [DDM:CONTEXT:ON] = \"Y\"\r\n        Select Case feeRuleOrder\r\n        @foreach(var vmAction in Model.Actions) {\r\n            @:Case @vmAction.OrdinalId\r\n\r\n                @:[DDM:CONTEXT:] = \"@vmAction.ContextRuleType|@vmAction.ContextRuleName|@vmAction.ContextScenarioName\"\r\n\r\n                foreach(var action in vmAction) {\r\n                    @:Try\r\n\r\n                    if (action.NeedConditionWrapper && !string.IsNullOrEmpty(action.ConditionWrapper))\r\n                    {\r\n                        @:If (@Raw(@action.ConditionWrapper)) Then\r\n                    }\r\n                       if (action.Value.StartsWith(\"DDM(\")) {\r\n                            @:[DDM:CONTEXT:CALCULATION] = \"@Raw(@action.ValueStripped)\"\r\n                            @:[@action.FieldId] = @Raw(@action.Value.Substring(3))\r\n                        } else if (action.Value.StartsWith(\"DDM[\")) {\r\n                            @:[DDM:CONTEXT:TABLE] = \"@Raw(@action.Value.Substring(3))\"\r\n                            @:Dim tableResult As Object\r\n                            @:tableResult = @Raw(@action.Value.Substring(3))\r\n                            @:If tableResult IsNot Nothing Then\r\n                                @:[@action.FieldId] = Convert.ToString(tableResult)\r\n                            @:End If\r\n                         \r\n                        } else {\r\n                            @:[DDM:CONTEXT:REGULAR] = \"@Raw(@action.Value)\"\r\n                            @:[@action.FieldId] = \"@Raw(@action.Value)\"\r\n                        }\r\n\r\n                    if (action.NeedConditionWrapper && !string.IsNullOrEmpty(action.ConditionWrapper))\r\n                    {\r\n                        @:End If\r\n                    }\r\n\r\n                    @:Catch\r\n\r\n                    @:End Try\r\n                }\r\n               \r\n        }\r\n            Case Else\r\n                '\r\n        End Select\r\n    End If\r\nCatch\r\n\r\nEnd Try\r\n[DDM:CONTEXT:ON] = \"N\"\r\n");
      DDMRuleCodeGenerator._razorEngineService.AddTemplate("DDMTemplateForDataTable", "\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    'DataTable: @Model.Name\r\n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n    Try\r\n    'Aggregated conditions\r\n        Dim conditionPass As Boolean\r\n        Dim dtRowOrder As Integer = -1\r\n        @foreach(var vmCond in Model.Conditions) {\r\n            if (vmCond.Count > 0) {\r\n                var printCondOp = false;\r\n                @:If Not conditionPass AndAlso ( _\r\n                foreach(var cond in vmCond) {\r\n                    var andAlso = printCondOp? \"AndAlso\" : \"\";\r\n                    @:@andAlso (@Raw(@cond.FormattedLine)) _\r\n                    printCondOp = true;\r\n                }\r\n                @:) Then\r\n                    @:conditionPass = True\r\n                    @:dtRowOrder = @vmCond.OrdinalId\r\n                @:End If\r\n            }\r\n        }\r\n\r\n        Select Case dtRowOrder\r\n            @foreach(var vmAction in Model.Actions) {\r\n                @:Case @vmAction.OrdinalId\r\n                    \r\n                    if (vmAction.Count > 0) {\r\n                        @:Dim i As Integer = 0\r\n                        @:Dim OutputList As Object() = New Object(@vmAction.Count){}\r\n                        foreach(var action in vmAction) {\r\n                            @:OutputList(i) = (@Raw(@action.FormattedLine))\r\n                            @:i += 1\r\n                        }\r\n                    }\r\n                    @:Return OutputList\r\n            }\r\n            Case Else\r\n                Return Nothing\r\n        End Select\r\n    Catch\r\n        Return Nothing\r\n    End Try\r\n");
      DDMRuleCodeGenerator._razorEngineService.AddTemplate("DDMTemplateForAllFeeRules", "\r\n'Any global settings for running the all DDM FeeRules\r\nDim byPass As Boolean\r\nDim conditionPass As Boolean\r\n\r\n@for(int i = 0; i < Model.Count; i++) {\r\n    @:@Raw(Model[i])\r\n}\r\n");
      DDMRuleCodeGenerator._razorEngineService.Compile("DDMTemplateForFeeRule", this._vmTypeFeeRule);
      DDMRuleCodeGenerator._razorEngineService.Compile("DDMTemplateForDataTable", this._vmTypeDataTable);
      DDMRuleCodeGenerator._razorEngineService.Compile("DDMTemplateForAllFeeRules", this._vmTypeAllFeeRules);
    }

    public string GetAdvancedCode(DDMVmFeeRule ddmVmFeeRule)
    {
      return DDMRuleCodeGenerator._razorEngineService.Run("DDMTemplateForFeeRule", this._vmTypeFeeRule, (object) ddmVmFeeRule);
    }

    public string GetAdvancedCode(DDMVmDataTable ddmVmDataTable)
    {
      return DDMRuleCodeGenerator._razorEngineService.Run("DDMTemplateForDataTable", this._vmTypeDataTable, (object) ddmVmDataTable);
    }

    public string GetAdvancedCode(List<string> colVmFeeRules)
    {
      return DDMRuleCodeGenerator._razorEngineService.Run("DDMTemplateForAllFeeRules", this._vmTypeAllFeeRules, (object) colVmFeeRules);
    }
  }
}
